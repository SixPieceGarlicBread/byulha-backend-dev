# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.
# This workflow will build a Java project with Gradle and cache/restore any dependencies to improve the workflow execution time
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-java-with-gradle

name: CD

on:
  push:
    branches: [ "main" ]

permissions:
  contents: read
  
jobs:
  check_repo:
    runs-on: ubuntu-latest
    outputs:
      cd-skip: ${{ steps.check_repo.outputs.cd-skip-value }}
    steps:
      - uses: actions/checkout@v3
      - name: Check Repo
        run: |
          if [ "$GITHUB_REPOSITORY" != "YOUR_USER/YOUR_REPO_NAME" ]; then
            echo 'cd-skip-value=true' >> $GITHUB_OUTPUT
          else
            echo 'cd-skip-value=false' >> $GITHUB_OUTPUT
          fi
          
  skip-cd:
    needs: check_repo
    if: github.repository != 'SixPieceGarlicBread/byulha-backend-dev'
    runs-on: ubuntu-latest
    steps:
      - name: Skip CD
        run: |
          echo "CD will be terminated soon..."
          exit 0
  
  build:
    runs-on: ubuntu-latest
    if: github.repository == 'SixPieceGarlicBread/byulha-backend-dev'
    needs: check_repo
    environment: main
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up JDK 11
      uses: actions/setup-java@v3
      with:
        java-version: '11'
        distribution: 'adopt'
        
    - name: Make test properties
      env:
        PROPERTIES: ${{ secrets.PROPERTIES_TEST }}
      run: |
        mkdir -p ./src/test/resources && cd "$_"
        touch ./application.yml
        echo $PROPERTIES | base64 --decode > application.yml
        
    - name: Build with Gradle
      run: |
        chmod +x ./gradlew
        ./gradlew clean build -x test
        
    - name: Docker build
      env:
        USERNAME: ${{ secrets.DOCKER_USERNAME }}
        REPO: ${{ secrets.DOCKER_REPO }}
      run: |
        docker build -f Dockerfile -t $USERNAME/$REPO .

    - name: Docker push
      env:
        USERNAME: ${{ secrets.DOCKER_USERNAME }}
        PASSWORD: ${{ secrets.DOCKER_PASSWORd }}
        REPO: ${{ secrets.DOCKER_REPO }}
      run: |
        docker login -u $USERNAME -p $PASSWORD
        docker push $USERNAME/$REPO

    - name: Deploy to server
      uses: appleboy/ssh-action@master
      id: deploy
      env:
        REPO: ${{ secrets.DOCKER_REPO }}
        USERNAME: ${{ secrets.DOCKER_USERNAME }}
        PASSWORD: ${{ secrets.DOCKER_PASSWORD }}
      with:
        host: ${{ secrets.SERVER_HOST }}
        username: ubuntu
        key: ${{ secrets.TABA4_PRIVATE_PEM_KEY }}
        envs: GITHUB_SHA,REPO,USERNAME,PASSWORD
        script: |
          sudo docker login -u $USERNAME -p $PASSWORD
          sudo docker rm -f $(docker ps -qa)
          sudo docker pull $USERNAME/$REPO
          docker-compose up -d
          docker image prune -f
